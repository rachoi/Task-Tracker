{"ast":null,"code":"var _jsxFileName = \"/Users/raymond/Desktop/Task-Tracker/frontend/src/Components/StopWatch.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport './StopWatch.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst StopWatch = () => {\n  _s();\n\n  const [time, setTime] = React.useState(0);\n  const [timerOn, setTimerOn] = React.useState(false);\n  React.useEffect(() => {\n    let interval = null;\n\n    if (timerOn) {\n      interval = setInterval(() => {\n        setTime(prevTime => prevTime + 10);\n      }, 10);\n    } else if (!timerOn) {\n      clearInterval(interval);\n    }\n\n    return () => clearInterval(interval);\n  }, [timerOn]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Timers\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Stopwatch\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"display\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: [(\"0\" + Math.floor(time / 60000 % 60)).slice(-2), \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [(\"0\" + Math.floor(time / 1000 % 60)).slice(-2), \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: (\"0\" + time / 10 % 100).slice(-2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"buttons\",\n      children: [!timerOn && time === 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          backgroundColor: \"rgb(153, 255, 255)\"\n        },\n        onClick: () => setTimerOn(true),\n        children: \"Start\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, this), timerOn && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setTimerOn(false),\n        children: \"Stop\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 21\n      }, this), !timerOn && time > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setTimerOn(true),\n        children: \"Resume\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this), !timerOn && time > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setTime(0),\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n\n_s(StopWatch, \"snp1kxavGO7tjRfbaxEOQxv4YU8=\");\n\n_c = StopWatch;\nexport default StopWatch;\n\nvar _c;\n\n$RefreshReg$(_c, \"StopWatch\");","map":{"version":3,"sources":["/Users/raymond/Desktop/Task-Tracker/frontend/src/Components/StopWatch.js"],"names":["React","StopWatch","time","setTime","useState","timerOn","setTimerOn","useEffect","interval","setInterval","prevTime","clearInterval","Math","floor","slice","backgroundColor"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,iBAAP;;;AAEA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AACtB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBH,KAAK,CAACI,QAAN,CAAe,CAAf,CAAxB;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBN,KAAK,CAACI,QAAN,CAAe,KAAf,CAA9B;AAEAJ,EAAAA,KAAK,CAACO,SAAN,CAAgB,MAAM;AACpB,QAAIC,QAAQ,GAAG,IAAf;;AAEA,QAAIH,OAAJ,EAAa;AACXG,MAAAA,QAAQ,GAAGC,WAAW,CAAC,MAAM;AAC3BN,QAAAA,OAAO,CAAEO,QAAD,IAAcA,QAAQ,GAAG,EAA1B,CAAP;AACD,OAFqB,EAEnB,EAFmB,CAAtB;AAGD,KAJD,MAIO,IAAI,CAACL,OAAL,EAAc;AACnBM,MAAAA,aAAa,CAACH,QAAD,CAAb;AACD;;AAED,WAAO,MAAMG,aAAa,CAACH,QAAD,CAA1B;AACD,GAZD,EAYG,CAACH,OAAD,CAZH;AAcA,sBACE;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAK,MAAA,EAAE,EAAC,SAAR;AAAA,8BACE;AAAA,mBAAO,CAAC,MAAMO,IAAI,CAACC,KAAL,CAAYX,IAAI,GAAG,KAAR,GAAiB,EAA5B,CAAP,EAAwCY,KAAxC,CAA8C,CAAC,CAA/C,CAAP;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,mBAAO,CAAC,MAAMF,IAAI,CAACC,KAAL,CAAYX,IAAI,GAAG,IAAR,GAAgB,EAA3B,CAAP,EAAuCY,KAAvC,CAA6C,CAAC,CAA9C,CAAP;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAA,kBAAO,CAAC,MAAQZ,IAAI,GAAG,EAAR,GAAc,GAAtB,EAA4BY,KAA5B,CAAkC,CAAC,CAAnC;AAAP;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAQE;AAAK,MAAA,EAAE,EAAC,SAAR;AAAA,iBACG,CAACT,OAAD,IAAYH,IAAI,KAAK,CAArB,iBACC;AAAQ,QAAA,KAAK,EAAE;AAACa,UAAAA,eAAe,EAAE;AAAlB,SAAf;AAAwD,QAAA,OAAO,EAAE,MAAMT,UAAU,CAAC,IAAD,CAAjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,EAIGD,OAAO,iBAAI;AAAQ,QAAA,OAAO,EAAE,MAAMC,UAAU,CAAC,KAAD,CAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJd,EAMG,CAACD,OAAD,IAAYH,IAAI,GAAG,CAAnB,iBACC;AAAQ,QAAA,OAAO,EAAE,MAAMI,UAAU,CAAC,IAAD,CAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAPJ,EASG,CAACD,OAAD,IAAYH,IAAI,GAAG,CAAnB,iBACC;AAAQ,QAAA,OAAO,EAAE,MAAMC,OAAO,CAAC,CAAD,CAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAVJ;AAAA;AAAA;AAAA;AAAA;AAAA,YARF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAyBD,CA3CD;;GAAMF,S;;KAAAA,S;AA6CN,eAAeA,SAAf","sourcesContent":["import React from \"react\";\nimport './StopWatch.css'\n\nconst StopWatch = () => {\n  const [time, setTime] = React.useState(0);\n  const [timerOn, setTimerOn] = React.useState(false);\n\n  React.useEffect(() => {\n    let interval = null;\n\n    if (timerOn) {\n      interval = setInterval(() => {\n        setTime((prevTime) => prevTime + 10);\n      }, 10);\n    } else if (!timerOn) {\n      clearInterval(interval);\n    }\n\n    return () => clearInterval(interval);\n  }, [timerOn]);\n\n  return (\n    <div className=\"Timers\">\n      <h2>Stopwatch</h2>\n      <div id=\"display\">\n        <span>{(\"0\" + Math.floor((time / 60000) % 60)).slice(-2)}:</span>\n        <span>{(\"0\" + Math.floor((time / 1000) % 60)).slice(-2)}:</span>\n        <span>{(\"0\" + ((time / 10) % 100)).slice(-2)}</span>\n      </div>\n\n      <div id=\"buttons\">\n        {!timerOn && time === 0 && (\n          <button style={{backgroundColor: \"rgb(153, 255, 255)\"}} onClick={() => setTimerOn(true)}>Start</button>\n        )}\n        {timerOn && <button onClick={() => setTimerOn(false)}>Stop</button>}\n\n        {!timerOn && time > 0 && (\n          <button onClick={() => setTimerOn(true)}>Resume</button>\n        )}\n        {!timerOn && time > 0 && (\n          <button onClick={() => setTime(0)}>Reset</button>\n        )}\n        \n      </div>\n    </div>\n  );\n};\n\nexport default StopWatch;"]},"metadata":{},"sourceType":"module"}